from typing import NamedTuple, List, Optional
import math
import random


class 坐标(NamedTuple):
    x: int
    y: int


# ---------------- 核心几何函数 ----------------

def 取两点间距离(坐标1: 坐标, 坐标2: 坐标) -> float:
    """返回两点之间的欧氏距离"""
    return math.hypot(坐标1.x - 坐标2.x, 坐标1.y - 坐标2.y)


def 取直线与垂线交点(点A: 坐标, 点B: 坐标, 外点: 坐标) -> 坐标:
    """已知线段AB，求过外点且垂直于AB的直线与AB的交点"""
    dx = 点A.x - 点B.x
    dy = 点A.y - 点B.y
    # 处理垂直或水平情况
    if dx == 0:
        return 坐标(点A.x, 外点.y)
    if dy == 0:
        return 坐标(外点.x, 点A.y)

    k = dy / dx
    k_垂 = -1 / k
    # AB直线方程: A1 x + B1 y = C1
    A1 = -k
    B1 = 1
    C1 = -k * 点A.x + 点A.y
    # 垂线方程: A2 x + B2 y = C2
    A2 = -k_垂
    B2 = 1
    C2 = -k_垂 * 外点.x + 外点.y
    # 克拉默法则求交点
    D = A1 * B2 - B1 * A2
    Dx = C1 * B2 - B1 * C2
    Dy = A1 * C2 - C1 * A2
    if D == 0:
        return 外点  # 平行情况
    x = round(Dx / D)
    y = round(Dy / D)
    return 坐标(x, y)


def 计算直线函数值(点A: 坐标, 点B: 坐标, x: int) -> int:
    """根据直线A，B的斜率和给定x，返回y的整数值"""
    dx = 点A.x - 点B.x
    dy = 点A.y - 点B.y
    if dx == 0:
        return 点A.y
    k = dy / dx
    y = k * (x - 点A.x) + 点A.y
    return round(y)


# ---------------- 区域顶点常量 ----------------

上顶点 = 坐标(394, 20)
下顶点 = 坐标(405, 549)
左顶点 = 坐标(68, 278)
右顶点 = 坐标(745, 293)


# ---------------- 攻击方向计算 ----------------

def 取进攻方向(识别点: 坐标) -> str:
    """计算目标点到四条边的垂线距离最小的方向"""
    dist_左上 = 取两点间距离(取直线与垂线交点(左顶点, 上顶点, 识别点), 识别点)
    dist_左下 = 取两点间距离(取直线与垂线交点(左顶点, 下顶点, 识别点), 识别点)
    dist_右上 = 取两点间距离(取直线与垂线交点(右顶点, 上顶点, 识别点), 识别点)
    dist_右下 = 取两点间距离(取直线与垂线交点(右顶点, 下顶点, 识别点), 识别点)

    列表: List[tuple[str, float]] = [
        ("左上", dist_左上),
        ("左下", dist_左下),
        ("右上", dist_右上),
        ("右下", dist_右下),
    ]
    列表.sort(key=lambda item: item[1])
    return 列表[0][0]


# ---------------- 可下兵点计算 ----------------

曾经取得的下兵点: List[坐标] = []

def 取可下兵坐标点(
    选定方向: Optional[str] = None,
    欲取点: Optional[坐标] = None,
    是否清空: bool = False,
    记录本次: bool = True
) -> 坐标:
    global 曾经取得的下兵点
    # 清空缓存
    if 是否清空:
        曾经取得的下兵点.clear()
        return 坐标(0, 0)
    # 初次随机产生点
    if not 选定方向 and not 欲取点:
        if not 曾经取得的下兵点:
            随机点 = 坐标(
                random.randint(200, 600),
                random.randint(100, 300)
            )
            return 取可下兵坐标点(取进攻方向(随机点), 随机点, False, False)
        return random.choice(曾经取得的下兵点)

    # 依据方向在相应边缘随机抖动
    波动半径 = 25
    rand_x = random.randint(欲取点.x - 波动半径, 欲取点.x + 波动半径)
    返回值 = 坐标(0, 0)

    if 选定方向 == "左下":
        x0 = min(max(rand_x, 68), 226)
        y0 = 计算直线函数值(左顶点, 下顶点, x0)
        返回值 = 坐标(x0, y0)
    elif 选定方向 == "左上":
        x0 = min(max(rand_x, 68), 394)
        y0 = 计算直线函数值(左顶点, 上顶点, x0)
        返回值 = 坐标(x0, y0)
    elif 选定方向 == "右上":
        x0 = min(max(rand_x, 394), 745)
        y0 = 计算直线函数值(上顶点, 右顶点, x0)
        返回值 = 坐标(x0, y0)
    elif 选定方向 == "右下":
        x0 = min(max(rand_x, 538), 745)
        y0 = 计算直线函数值(右顶点, 下顶点, x0)
        返回值 = 坐标(x0, y0)

    if 记录本次:
        曾经取得的下兵点.append(返回值)
    return 返回值


# ---------------- 边缘距离判断 ----------------

def 判断目标点到可进攻边缘距离是否小于设定值(识别点: 坐标, 距离阈值: float) -> bool:
    """判断目标点到四边的最小垂线距离是否小于给定阈值"""
    dist_左上 = 取两点间距离(取直线与垂线交点(左顶点, 上顶点, 识别点), 识别点)
    dist_左下 = 取两点间距离(取直线与垂线交点(左顶点, 下顶点, 识别点), 识别点)
    dist_右上 = 取两点间距离(取直线与垂线交点(右顶点, 上顶点, 识别点), 识别点)
    dist_右下 = 取两点间距离(取直线与垂线交点(右顶点, 下顶点, 识别点), 识别点)

    最小距离 = min(dist_左上, dist_左下, dist_右上, dist_右下)
    return 最小距离 < 距离阈值


# ---------------- 模块测试示例 ----------------
if __name__ == "__main__":
    测试点 = 坐标(250, 300)
    print("进攻方向：", 取进攻方向(测试点))
    print("可下兵坐标：", 取可下兵坐标点(取进攻方向(测试点), 测试点))
    print("边缘距离<50：", 判断目标点到可进攻边缘距离是否小于设定值(测试点, 50))
