from 任务流程.基础任务框架 import 基础任务, 任务上下文
from 模块.检测.模板匹配器 import 模板匹配引擎

class 检测游戏登录状态任务(基础任务):

    def __init__(self):
        self.第一次检测游戏登录=True
    """等待游戏进入时返回"""
    def 执行(self, 上下文: '任务上下文', 首次登录:bool=True) -> bool:
        """等待游戏进入时返回"""
        识图引擎 = 模板匹配引擎()

        if 首次登录 == True:
            上下文.置脚本状态("检测登录情况，最长等待约200秒", 200)
        else:
            上下文.置脚本状态("检测登录情况")

        while True:
            上下文.脚本延时(500)
            屏幕图像 = 上下文.op.获取屏幕图像cv(0, 0, 800, 600)  # 每一个循环获取一次屏幕图像

            # 检查是否需重新载入
            是否匹配, (x, y), _ = 识图引擎.执行匹配(屏幕图像[219:377, 196:607], "重新载入游戏.bmp", 相似度阈值=0.9)
            if 是否匹配:
                上下文.置脚本状态("重新载入游戏,继续检测登录情况", 200)
                上下文.点击(x + 196, y + 219)  # 转换为全屏坐标
                上下文.脚本延时(1000)
                上下文.脚本延时(5 * 1000)
                continue

            # 检查登录弹窗确定按钮
            是否匹配, (x, y), _ = 识图引擎.执行匹配(屏幕图像, "顶号_重新载入.bmp", 相似度阈值=0.9)
            if 是否匹配:
                上下文.置脚本状态("另一个设备在连接此村庄，等待操作账号,200秒后重连,继续检测登录情况")
                上下文.脚本延时(200*60)
                上下文.点击(x, y)
                上下文.脚本延时(100)
                continue

            # 检查登录弹窗确定按钮
            是否匹配, (x, y), _ = 识图引擎.执行匹配(屏幕图像, "登录弹窗的确定.bmp|登录的确定按钮1.bmp|收集胜利之星的确定.bmp|收集胜利之星的确定[1].bmp", 相似度阈值=0.9)
            if 是否匹配:
                上下文.置脚本状态("点击确定，继续检测登录情况")
                上下文.点击(x, y)
                上下文.脚本延时(100)
                continue

            # 检查登录弹窗确定按钮
            是否匹配, (x, y), _ = 识图引擎.执行匹配(屏幕图像, "开宝箱界面.bmp", 相似度阈值=0.9)
            if 是否匹配:
                上下文.置脚本状态("开宝箱咯")
                for _ in range(5):
                    上下文.点击(x, y)
                    上下文.脚本延时(100)
                上下文.脚本延时(2000)
                continue

            # 开宝箱后的继续界面
            是否匹配, (x, y), _ = 识图引擎.执行匹配(屏幕图像, "开宝箱界面_继续.bmp",相似度阈值=0.8)
            上下文.脚本延时(50)
            if 是否匹配:
                上下文.置脚本状态("出现开宝箱后的继续界面，点击,继续检测登录状态")
                上下文.点击(x, y)
                上下文.脚本延时(100)
                break

            # 检查家乡进攻图标
            是否匹配, (x, y), _ = 识图引擎.执行匹配(屏幕图像, "家乡进攻图标.bmp|家乡进攻图标1.bmp|家乡进攻图标2.bmp|家乡进攻图标3.bmp", 相似度阈值=0.8)
            上下文.脚本延时(50)
            if 是否匹配:
                上下文.置脚本状态("出现家乡进攻图标，已经成功登录")
                break

            # 检查宝石图标
            是否匹配, (x, y), _ = 识图引擎.执行匹配(屏幕图像[4:227, 740:792], "宝石.bmp|宝石1.bmp|宝石2.bmp|宝石3.bmp", 相似度阈值=0.8)
            上下文.脚本延时(50)
            if 是否匹配:
                上下文.置脚本状态("出现宝石图标，已经成功登录")
                break

        if self.第一次检测游戏登录==True:
            self.第一次检测游戏登录=False
            上下文.置脚本状态("首次启动,正在拉远视距")
            for _ in range(5):
                上下文.键盘.按字符按压("f5")
                上下文.脚本延时(200)
            return True

        # 检查视距调整
        是否匹配, (x, y), _ = 识图引擎.执行匹配(屏幕图像, "不用拉远视距[5].bmp|不用拉远视距[4].bmp|不用拉远视距[3].bmp|不用拉远视距[2].bmp|不用拉远视距[1].bmp|夜世界_不用拉远视距[1].bmp", 相似度阈值=0.7)
        if 是否匹配:
            上下文.置脚本状态("无需拉远视距")
        else:
            上下文.置脚本状态("正在拉远视距")
            for _ in range(5):
                上下文.键盘.按字符按压("f5")
                上下文.脚本延时(200)

        return True





